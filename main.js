!function(){"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var t=function(){function t(e){var n=e.data,r=e.handleImageClick,o=e.handleLikeClick,i=e.handleTrashClick,a=e.currentUserId,c=e.cardSelector;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._name=n.name,this._link=n.link,this._cardSelector=c,this._handleImageClick=r,this._likes=n.likes,this._handleLikeClick=o,this._cardId=n._id,this._deleteConfirmationForm=i,this._currentUserId=a,this._ownerId=n.owner._id}var n,r;return n=t,(r=[{key:"getCardId",value:function(){return this._cardId}},{key:"_getTemplate",value:function(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}},{key:"handleDeleteCard",value:function(){this._element.remove(),this._element=null}},{key:"isLiked",value:function(){return this._loveIcon.classList.contains("card__button_active")}},{key:"handleLikeData",value:function(e){this._loveIcon.classList.toggle("card__button_active"),this._cardLikesCounter.textContent=e.likes.length}},{key:"generateCard",value:function(){var e=this;return this._element=this._getTemplate(),this._element.querySelector(".card__title").textContent=this._name,this._imageElement=this._element.querySelector(".card__img"),this._imageElement.src=this._link,this._imageElement.alt=this._name,this._imageElement.addEventListener("click",this._handleImageClick),this._cardLikesCounter=this._element.querySelector(".card__likes-counter"),this._cardLikesCounter.textContent=this._likes.length,this._loveIcon=this._element.querySelector(".card__button"),this._trashIcon=this._element.querySelector(".card__delete"),this._ownerId!==this._currentUserId&&(this._trashIcon.remove(),this._trashIcon=null),this._likes.some((function(t){return t._id===e._currentUserId}))&&this._loveIcon.classList.add("card__button_active"),this._setEventListeners(),this._element}},{key:"_setEventListeners",value:function(){var e=this;this._loveIcon.addEventListener("click",(function(){e._handleLikeClick(e)})),this._trashIcon&&this._trashIcon.addEventListener("click",(function(){e._deleteConfirmationForm(e)}))}}])&&e(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),t}();function n(e){return function(e){if(Array.isArray(e))return r(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._formElement=n}var t,r;return t=e,(r=[{key:"_showInputError",value:function(e,t){var n=this._formElement.querySelector(".".concat(e.id,"-input-error"));e.classList.add(this._inputErrorClass),n.textContent=t,n.classList.add(this._errorClass)}},{key:"_hideInputError",value:function(e){var t=this._formElement.querySelector(".".concat(e.id,"-input-error"));e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}},{key:"_hasInvalidInput",value:function(){return n(this._inputList).some((function(e){return!e.validity.valid}))}},{key:"_toggleInputError",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}},{key:"_toggleButtonState",value:function(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.disabled=!1)}},{key:"_setEventListeners",value:function(){var e=this;this._inputList=n(this._formElement.querySelectorAll(this._inputSelector)),this._buttonElement=this._formElement.querySelector(this._submitButtonSelector),this._inputList.forEach((function(t){t.addEventListener("input",(function(){e._toggleInputError(t),e._toggleButtonState()}))}))}},{key:"enableValidation",value:function(){this._formElement.addEventListener("submit",(function(e){e.preventDefault()})),this._setEventListeners()}},{key:"resetValidation",value:function(){var e=this;this._inputList.forEach((function(t){e._hideInputError(t)})),this._toggleButtonState()}}])&&o(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var c=function(){function e(t){var n=t.items,r=t.renderer,o=t.containerSelector;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._items=n,this._renderer=r,this._container=document.querySelector(o)}var t,n;return t=e,(n=[{key:"renderItems",value:function(){var e=this;this._items.forEach((function(t){e._renderer(t)}))}},{key:"addItem",value:function(e){this._container.prepend(e)}}])&&a(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popupElement=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this),this._handleMouseDown=this._handleMouseDown.bind(this)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popupElement.classList.add("forms_is-open"),document.addEventListener("keydown",this._handleEscClose),document.addEventListener("mousedown",this._handleMouseDown)}},{key:"close",value:function(){this._popupElement.classList.remove("forms_is-open"),document.removeEventListener("keydown",this._handleEscClose),document.removeEventListener("mousedown",this._handleMouseDown)}},{key:"_handleMouseDown",value:function(e){(e.target.classList.contains("forms")||e.target.classList.contains("forms__button-close"))&&this.close()}},{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}}])&&u(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function l(e){return l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},l(e)}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function h(){return h="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=p(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},h.apply(this,arguments)}function p(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=m(e)););return e}function d(e,t){return d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},d(e,t)}function y(e,t){if(t&&("object"===l(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function m(e){return m=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},m(e)}var _=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&d(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=m(r);if(o){var n=m(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return y(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._popupImage=document.querySelector(".forms__image"),t._popupImageTitle=document.querySelector(".forms__image-title"),t}return t=a,(n=[{key:"open",value:function(e){this._popupImage.src=e.link,this._popupImage.alt="Image ".concat(e.name),this._popupImageTitle.textContent=e.name,h(m(a.prototype),"open",this).call(this)}}])&&f(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(s);function b(e){return b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},b(e)}function v(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function g(){return g="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=S(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},g.apply(this,arguments)}function S(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=E(e)););return e}function k(e,t){return k=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},k(e,t)}function w(e,t){if(t&&("object"===b(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function E(e){return E=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},E(e)}var I=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&k(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=E(r);if(o){var n=E(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return w(this,e)});function a(e){var t,n=e.popupSelector,r=e.handleFormSubmit;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,n))._form=t._popupElement.querySelector(".form"),t._handleFormSubmit=r,t._inputList=t._form.querySelectorAll(".form__input"),t._submitButton=t._form.querySelector(".form__button"),t._buttonText=t._submitButton.textContent,t}return t=a,(n=[{key:"_getInputValues",value:function(){var e=this;return this._formValues={},this._inputList.forEach((function(t){e._formValues[t.name]=t.value})),this._formValues}},{key:"setEventListeners",value:function(){var e=this;this._form.addEventListener("submit",(function(t){t.preventDefault(),e._handleFormSubmit(e._getInputValues()),e.close()}))}},{key:"close",value:function(){this._form.reset(),g(E(a.prototype),"close",this).call(this)}},{key:"renderLoading",value:function(e){this._submitButton.textContent=e?"Saving ...":this._buttonText}}])&&v(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(s);function C(e){return C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},C(e)}function O(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function j(){return j="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=L(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},j.apply(this,arguments)}function L(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=T(e)););return e}function P(e,t){return P=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},P(e,t)}function q(e,t){if(t&&("object"===C(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function T(e){return T=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},T(e)}var R=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&P(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=T(r);if(o){var n=T(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return q(this,e)});function a(e){var t,n=e.popupSelector;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,n))._yesButton=t._popupElement.querySelector(".form__button"),t}return t=a,(n=[{key:"open",value:function(){this._yesButton.addEventListener("click",this._handleYesSubmit),j(T(a.prototype),"open",this).call(this)}},{key:"close",value:function(){this._yesButton.removeEventListener("click",this._handleYesSubmit),j(T(a.prototype),"close",this).call(this)}},{key:"setSubmit",value:function(e){this._handleYesSubmit=e}}])&&O(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(s);function U(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var B=function(){function e(t){var n=t.userNameSelector,r=t.userOccupationSelector,o=t.userPictureSelector;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._profileName=document.querySelector(n),this._profileJob=document.querySelector(r),this._userPicture=document.querySelector(o)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{userInputName:this._profileName.textContent,userInputJob:this._profileJob.textContent}}},{key:"setUserInfo",value:function(e){var t=e.userInputName,n=e.userInputJob,r=e.userAvatar;this._profileName.textContent=t,this._profileJob.textContent=n,this._userPicture.src=r}}])&&U(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function x(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var A,D,N=function(){function e(t){var n=t.baseUrl,r=t.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=n,this._headers=r}var t,n;return t=e,(n=[{key:"promiseAll",value:function(){return Promise.all([this.getUserData(),this.getInitialCards()])}},{key:"getInitialCards",value:function(){return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).catch((function(e){console.log(e)}))}},{key:"getUserData",value:function(){return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).catch((function(e){console.log(e)}))}},{key:"editProfileInfo",value:function(e){var t=e.username,n=e.about;return fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:n})}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).catch((function(e){console.log(e)}))}},{key:"editProfilePicture",value:function(e){var t=e.avatar;return fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:t})}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).catch((function(e){console.log(e)}))}},{key:"addNewCard",value:function(e){var t=e.name,n=e.link;return fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:n})}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).catch((function(e){console.log(e)}))}},{key:"deleteCard",value:function(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).catch((function(e){console.log(e)}))}},{key:"addLike",value:function(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"PUT",headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).catch((function(e){console.log(e)}))}},{key:"removeLike",value:function(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"DELETE",headers:this._headers}).then((function(e){return e.ok?e.json():Promise.reject("Error: ".concat(e.status))})).catch((function(e){console.log(e)}))}}])&&x(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),V={formSelector:".forms",inputSelector:".form__input",submitButtonSelector:".form__button",inactiveButtonClass:"form__button_disabled",inputErrorClass:"form__input_type_error",errorClass:"form__error-text_active"},J=(document.querySelector(".cards__container"),document.querySelector("#edit-profile")),F=document.querySelector("#img-add"),M=document.querySelector("#add-form"),Y=(document.querySelector("#edit-form"),document.querySelector("#update-avatar-popup")),H=document.querySelector("#avatar-form"),$=document.querySelector(".profile__button-name-edit"),z=document.querySelector(".profile__button-add"),G=document.querySelector(".profile__img-icon"),K=(J.querySelector(".forms__button-close"),F.querySelector(".forms__button-close"),document.querySelector(".profile__name"),document.querySelector(".profile__about"),J.querySelector("#username")),Q=J.querySelector("#about");function W(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}F.querySelector("#title"),F.querySelector("#image-link");var X=new N({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"66d060c3-a92b-49d0-add5-d7e29bf411c9","Content-Type":"application/json"}}),Z=new i(V,J),ee=new i(V,F),te=new i(V,Y);Z.enableValidation(),ee.enableValidation(),te.enableValidation(),X.promiseAll().then((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,c=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){c=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(c)throw o}}return i}}(t,n)||function(e,t){if(e){if("string"==typeof e)return W(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?W(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1];ie.setUserInfo({userInputName:o.name,userInputJob:o.about,userAvatar:o.avatar}),D=o._id,(A=new c({items:i,renderer:ue,containerSelector:".cards__container"})).renderItems()})).catch((function(e){return console.error("Error while executing: ".concat(e))}));var ne=new I({popupSelector:"#img-add",handleFormSubmit:function(e){X.addNewCard(e).then((function(e){return ue(e)}))}});ne.setEventListeners();var re=new I({popupSelector:"#edit-profile",handleFormSubmit:function(e){re.renderLoading(!0),X.editProfileInfo(e).then((function(e){console.log(e),ie.setUserInfo({userInputName:e.name,userInputJob:e.about,userAvatar:e.avatar})})).catch((function(e){console.log(e)})).finally((function(){re.renderLoading(!1)}))}});re.setEventListeners();var oe=new I({popupSelector:"#update-avatar-popup",handleFormSubmit:function(e){oe.renderLoading(!0),X.editProfilePicture(e).then((function(e){ie.setUserInfo({userInputName:e.name,userInputJob:e.about,userAvatar:e.avatar})})).catch((function(e){console.log(e)})).finally((function(){oe.renderLoading(!1)}))}});oe.setEventListeners();var ie=new B({userNameSelector:".profile__name",userOccupationSelector:".profile__about",userPictureSelector:".profile__img"}),ae=new _("#image-show"),ce=new R({popupSelector:"#confirm-popup"});function ue(e){var n=new t({data:e,handleImageClick:function(){ae.open(e)},handleTrashClick:function(){ce.setSubmit((function(){console.log(n.getCardId()),X.deleteCard(n.getCardId()).then((function(e){ce.close(),n.handleDeleteCard()})).catch((function(e){console.log(e)}))})),ce.open()},handleLikeClick:function(e){e.isLiked()?X.removeLike(e.getCardId()).then((function(t){return e.handleLikeData(t)})).catch((function(e){console.log(e)})):X.addLike(e.getCardId()).then((function(t){return e.handleLikeData(t)})).catch((function(e){console.log(e)}))},currentUserId:D,cardSelector:"#card"}),r=n.generateCard();A.addItem(r)}$.addEventListener("click",(function(){var e,t,n;t=(e=ie.getUserInfo()).userInputName,n=e.userInputJob,K.value=t,Q.value=n,Z.resetValidation(),re.open()})),z.addEventListener("click",(function(){M.reset(),ee.resetValidation(),ne.open()})),G.addEventListener("click",(function(){H.reset(),te.resetValidation(),oe.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,